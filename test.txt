(import '(ar.com.maba.tesis.collections ArrayStack))
(import '(com.microsoft.z3 Context Status Solver))
(use 'clojure.stacktrace)
(require '[mentat.selDSL :as d])
(require '[mentat.z3 :as z3])
(require '[mentat.core :as t])
(require '[mentat.graph :as g])
(require '[clojure.string :only (join) :as s])

(def l (t/trace-gen ArrayStack t/random-sel))
(def t1000 (take 1000 l))

(def g (g/build-dot-file t1000))

(println g)



(def l (t/trace-fn a t/random-sel))

(def fs (t/get-all-fields (class a)))
(def vs (t/get-field-values a fs))
(def ms (t/public-methods a))
(def mis (t/all-method-infos ms))

(. ar.com.maba.tesis.z3.example.JavaExample main)

install z3 jar in lein repo:
- add "localrepo" lein plugin to your config

- in "~/.lein" create file "profiles.clj" with: {:user {:plugins [[lein-localrepo "0.5.0"]]}}

- execute: lein localrepo install <location of com.microsoft.z3.jar> com.microsoft/z3 4.3.2.Uecceb0ac



(declare-datatypes (T) ((Stack (List T)))))
(define-fun count ((x!1 Stack)) Int
  (ite (= x!1 nil) 0 (+ 1 (count (tail x!1)))) 
  )
(declare-const s1 (Stack Int))

(require '[mentat.z3 :as z3])
(def ctx (z3/create-context))
(def symbs {:o (z3/mk-int-const ctx "o")})
(def inst-state {:limit 3 :stack [1 2]})
(def expr1 (read-string "(and (< 3 o) (= 0 (mod o 2)))"))
(def expr2 (read-string "(eval (= limit (count stack)))"))
(def bool-expr1 (z3/z3 expr1 symbs inst-state ctx))
(def bool-expr2 (z3/z3 expr2 symbs inst-state ctx))
(def model1 (z3/get-model (z3/mkSolver ctx) bool-expr1))
(def generated-params (z3/model-to-map model1 symbs))


---------------------------
(import '(ar.com.maba.tesis.collections NumbersToZ3))
(require '[mentat.core :as mc])
(require '[mentat.z3 :as z3])
(require :reload '[mentat.javaZ3 :as jz3])
(def ctx (z3/create-context))
(def i2z3 (NumbersToZ3.))

(jz3/mk-instance ctx i2z3)
---------------------

run lein to be able to use z3
LD_LIBRARY_PATH=./native/ lein repl


-----------------------------------
(import '(ar.com.maba.tesis.collections ArrayStack))
(import '(com.microsoft.z3 Context Status Solver))
(import '(ar.com.maba.tesis.preconditions Pre ClassDefinition))
(use 'clojure.stacktrace)
(require :reload '[mentat.core :as c])
(require :reload '[mentat.trace :as t])
(require :reload '[mentat.z3 :as z3])
(require :reload '[mentat.graph :as g])

(def l (t/trace-gen ArrayStack t/random-sel))
(def t100 (take 100 l))
t100

